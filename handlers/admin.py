from aiogram import Router
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from db import add_product,delete_product,search,add_discount_to_product
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.filters.command import Command
import config
from aiogram.filters import BaseFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram import types
from aiogram import F
import logging


router = Router()


class AddProductState(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_price = State()
    waiting_for_photo = State()
    confirming_product = State()
    waiting_for_category = State()

class DeleteProductState(StatesGroup):
    waiting_for_product_id = State()

class AddDiscountState(StatesGroup):
    waiting_for_product_id = State()
    waiting_for_discount = State()

class IsAdminFilter(BaseFilter):
    
    async def __call__(self, obj: Message | CallbackQuery) -> bool:
        return obj.from_user.id in config.ADMIN_IDS

@router.message(Command("admin"), IsAdminFilter())
async def cmd_admin(message: Message, state: FSMContext):

    await state.clear()
    
    buttons = [
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="admin_add_products")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="admin_remove_products")],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å–∫–∏–¥–∫–∏", callback_data="admin_add_discounts")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    msg = await message.answer("üë§ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=keyboard)

    await state.update_data(messages=[msg.message_id])

@router.callback_query(lambda c: c.data == 'admin_menu', IsAdminFilter())
async def cmd_admin(callback_query: CallbackQuery, state: FSMContext):

    data = await state.get_data()
    messages_to_delete = data.get("messages", [])

    for msg_id in messages_to_delete:
        try:
            await callback_query.bot.delete_message(chat_id=callback_query.message.chat.id, message_id=msg_id)
        except:
            pass

    await state.clear()
    
    buttons = [
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="admin_add_products")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="admin_remove_products")],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å–∫–∏–¥–∫–∏", callback_data="admin_add_discounts")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    msg = await callback_query.message.answer("üë§ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=keyboard)

    await state.update_data(messages=[msg.message_id])

    await callback_query.answer()

    

@router.callback_query(lambda c: c.data == 'admin_add_products', IsAdminFilter())
async def cmd_admin_add_products(callback_query: CallbackQuery, state: FSMContext):

    data=await state.get_data()
    messages_to_delete=data.get("messages",[])

    for msg_id in messages_to_delete:
        try:
            await callback_query.bot.delete_message(chat_id=callback_query.message.chat.id, message_id=msg_id)
        except:
            pass

    await state.clear()

    data=await state.get_data()
    old_messages=data.get("messages",[])

    msg = await callback_query.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

    old_messages.append(msg.message_id)

    await state.update_data(messages=old_messages)
    logging.info(f'–¥–∞—Ç–∞ –∏–∑ —Å—Ç–µ–π—Ç {old_messages}')
    await state.set_state(AddProductState.waiting_for_name)

@router.message(AddProductState.waiting_for_name, IsAdminFilter())
async def process_name(message: types.Message, state: FSMContext):
    data=await state.get_data()
    old_messages=data.get("messages",[])
    old_messages.append(message.message_id)

    await state.update_data(name=message.text)
    
    msg =await message.answer("‚úè –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

    old_messages.append(msg.message_id)

    await state.update_data(messages=old_messages)
    logging.info(f'–¥–∞—Ç–∞ –∏–∑ —Å—Ç–µ–π—Ç {old_messages}')
    await state.set_state(AddProductState.waiting_for_description)


@router.message(AddProductState.waiting_for_description, IsAdminFilter())
async def process_description(message: types.Message, state: FSMContext):
    data = await state.get_data()
    old_messages = data.get("messages", [])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    old_messages.append(message.message_id)

    await state.update_data(description=message.text)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞
    msg = await message.answer("üóÇÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:")

    # –î–æ–±–∞–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫
    old_messages.append(msg.message_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state
    await state.update_data(messages=old_messages)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É, –∑–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await state.set_state(AddProductState.waiting_for_category)


@router.message(AddProductState.waiting_for_category, IsAdminFilter())
async def process_category(message: types.Message, state: FSMContext):
    category = message.text
    
    data = await state.get_data()
    old_messages = data.get("messages", [])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(category=category)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
    old_messages.append(message.message_id)

    await state.update_data(messages=old_messages)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞
    msg = await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–≤ —Ä—É–±–ª—è—Ö):")
    
    # –î–æ–±–∞–≤–ª—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫
    old_messages.append(msg.message_id)
    await state.update_data(messages=old_messages)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await state.set_state(AddProductState.waiting_for_price)



@router.message(AddProductState.waiting_for_price, IsAdminFilter())
async def process_price(message: types.Message, state: FSMContext):
    data=await state.get_data()
    old_messages=data.get("messages",[])
    old_messages.append(message.message_id)
    try:
        price = float(message.text)
        if price <= 0:
            raise ValueError
    except ValueError:
        msg=await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).")
        old_messages.append(msg.message_id)
        return

    msg = await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:")

    old_messages.append(msg.message_id)
    await state.update_data(messages=old_messages, price=price)

    logging.info(f'–¥–∞—Ç–∞ –∏–∑ —Å—Ç–µ–π—Ç {old_messages}')
    await state.set_state(AddProductState.waiting_for_photo)

@router.message(AddProductState.waiting_for_photo, IsAdminFilter())
async def process_photo(message: types.Message, state: FSMContext):
    data=await state.get_data()
    old_messages=data.get("messages",[])
    old_messages.append(message.message_id)

    photo_id = message.photo[0].file_id
    logging.info(photo_id)
    await state.update_data(photo=photo_id, messages=old_messages)

    data = await state.get_data()

    confirmation_text = (
        f"üõç <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üóÇÔ∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {data.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} —Ä—É–±.\n\n"
        f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞."
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_add_product")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_add_product")]
    ])

    msg = await message.answer_photo(photo=photo_id, caption=confirmation_text, parse_mode="HTML", reply_markup=keyboard)

    old_messages.append(msg.message_id)

    await state.update_data(messages=old_messages)
    logging.info(f'–¥–∞—Ç–∞ –∏–∑ —Å—Ç–µ–π—Ç {old_messages}')
    await state.set_state(AddProductState.confirming_product)

@router.callback_query(lambda c: c.data == "confirm_add_product", IsAdminFilter())
async def confirm_add_product(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    old_messages=data.get("messages",[])

    
    add_product(
        name=data['name'],
        description=data['description'],
        price=data['price'],
        image_url=data['photo'],
        category=data['category']
    )
    
    buttons=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä", callback_data="admin_add_products")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_menu")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    msg = await callback_query.message.answer("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥!", reply_markup=keyboard)

    old_messages.append(msg.message_id)
    await state.clear()
    await state.update_data(messages=old_messages)
    logging.info(f'–¥–∞—Ç–∞ –∏–∑ —Å—Ç–µ–π—Ç {old_messages}')
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "cancel_add_product", IsAdminFilter())
async def cancel_add_product(callback_query: CallbackQuery, state: FSMContext):
    data=await state.get_data()
    old_messages=data.get("messages",[])
    buttons=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä", callback_data="admin_add_products")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_menu")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    msg = await callback_query.message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard)

    old_messages.append(msg.message_id)
    await state.update_data(messages=old_messages)

    logging.info(f'–¥–∞—Ç–∞ –∏–∑ —Å—Ç–µ–π—Ç {old_messages}')
    await callback_query.answer()



@router.callback_query(lambda c: c.data == "admin_remove_products", IsAdminFilter())
async def cmd_admin_remove_products(callback_query: CallbackQuery, state: FSMContext):
    data=await state.get_data()
    old_messages=data.get("messages",[])

    msg = await callback_query.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

    old_messages.append(msg.message_id)

    await state.update_data(messages=old_messages)
    logging.info(f'–¥–∞—Ç–∞ –∏–∑ —Å—Ç–µ–π—Ç {old_messages}')
    await state.set_state(DeleteProductState.waiting_for_product_id)

    await callback_query.answer()

@router.message(DeleteProductState.waiting_for_product_id, IsAdminFilter())
async def search_product(message: types.Message, state: FSMContext):
    data = await state.get_data()
    old_messages = data.get("messages", [])
    old_messages.append(message.message_id)

    await state.update_data( messages=old_messages)

    msg = await message.answer("üîé –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞...")

    old_messages.append(msg.message_id)

    result = search(message.text)
    

    if result:
        

        for product in result:
            logging.info(dict(product))
            buttons = [
            [InlineKeyboardButton(text="‚úÖ –£–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_product_{product['id']}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_menu")]
        ]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            # –î–æ—Å—Ç—É–ø –∫ –ø–æ–ª—è–º —á–µ—Ä–µ–∑ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏
            caption = (
        f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product['name']}\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product['description']}\n"
        f"üóÇÔ∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {product['category']}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {product['price']} —Ä—É–±.\n"
    )
            
            msg = await message.answer_photo(
                photo=product['image_url'],
                caption=caption,
                parse_mode="HTML", 
                reply_markup=keyboard
            )

            old_messages.append(msg.message_id)
    else:
        msg = await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    old_messages.append(msg.message_id)

    await state.update_data(messages=old_messages)
    logging.info(f'–¥–∞—Ç–∞ –∏–∑ —Å—Ç–µ–π—Ç {old_messages}')

@router.callback_query(lambda c: c.data.startswith("confirm_delete_product_"), IsAdminFilter())
async def confirm_delete_product(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    old_messages = data.get("messages", [])
    logging.info(f'{callback_query.data}')
    product_id = callback_query.data.split("_")[3]

    delete_product(product_id)

    buttons=[
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_menu")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    msg = await callback_query.message.answer("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", reply_markup=keyboard)

    old_messages.append(msg.message_id)
    await state.clear()
    await state.update_data(messages=old_messages)
    logging.info(f'–¥–∞—Ç–∞ –∏–∑ —Å—Ç–µ–π—Ç {old_messages}')
    await callback_query.answer()






    















@router.callback_query(lambda c: c.data == "admin_add_discounts", IsAdminFilter())
async def cmd_admin_add_discount(callback_query: CallbackQuery, state: FSMContext):
    data=await state.get_data()
    old_messages=data.get("messages",[])

    msg = await callback_query.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

    old_messages.append(msg.message_id)

    await state.update_data(messages=old_messages)
    logging.info(f'–¥–∞—Ç–∞ –∏–∑ —Å—Ç–µ–π—Ç {old_messages}')
    await state.set_state(AddDiscountState.waiting_for_product_id)

    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Å–∫–∏–¥–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
@router.callback_query(lambda c: c.data.startswith("confirm_add_discount_"), IsAdminFilter())
async def confirm_add_discount(callback_query: CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ callback_data
    product_id = int(callback_query.data.split("_")[3])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(product_id=product_id)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–∫–∏–¥–∫—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞
    msg = await callback_query.message.answer("üí∏ –í–≤–µ–¥–∏—Ç–µ —Å–∫–∏–¥–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö):")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    data = await state.get_data()
    old_messages = data.get("messages", [])
    old_messages.append(msg.message_id)
    await state.update_data(messages=old_messages)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–∫–∏–¥–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
@router.message(AddDiscountState.waiting_for_discount, IsAdminFilter())
async def process_discount(message: types.Message, state: FSMContext):
    data = await state.get_data()
    old_messages = data.get("messages", [])
    old_messages.append(message.message_id)

    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    product_id = data.get("product_id")

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å–∫–∏–¥–∫—É –≤ —á–∏—Å–ª–æ
        discount_value = float(message.text)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫–∏–¥–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        if discount_value < 0 or discount_value > 100:
            raise ValueError

    except ValueError:
        msg = await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å–∫–∏–¥–∫—É (–æ—Ç 0 –¥–æ 100).")
        old_messages.append(msg.message_id)
        await state.update_data(messages=old_messages)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–∏–¥–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_discount_to_product(product_id, discount_value)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏
    msg = await message.answer(f"‚úÖ –°–∫–∏–¥–∫–∞ {discount_value}% —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞.")
    
    old_messages.append(msg.message_id)
    await state.update_data(messages=old_messages)

    logging.info(f'–î–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–µ–π—Ç {old_messages}')

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫ –æ–∂–∏–¥–∞–Ω–∏—é ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    await state.set_state(AddDiscountState.waiting_for_product_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏
@router.message(AddDiscountState.waiting_for_product_id, IsAdminFilter())
async def search_product(message: types.Message, state: FSMContext):
    data = await state.get_data()
    old_messages = data.get("messages", [])
    old_messages.append(message.message_id)

    await state.update_data(messages=old_messages)

    msg = await message.answer("üîé –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞...")

    old_messages.append(msg.message_id)

    # –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    result = search(message.text)
    
    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Å–∫–∏–¥–∫—É
    if result:
        for product in result:
            buttons = [
                [InlineKeyboardButton(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"confirm_add_discount_{product['id']}")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_menu")]
            ]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
            msg = await message.answer_photo(
                photo=product['image_url'],
                caption=f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product['name']}\n"
                        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product['description']}\n"
                        f"üóÇÔ∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {product['category']}\n"  
                        f"üí∞ <b>–¶–µ–Ω–∞:</b> {product['price']} —Ä—É–±.\n",
                parse_mode="HTML", 
                reply_markup=keyboard
            )

            # –î–æ–±–∞–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            old_messages.append(msg.message_id)
    else:
        msg = await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    old_messages.append(msg.message_id)

    await state.update_data(messages=old_messages)
    logging.info(f'–î–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–µ–π—Ç {old_messages}')

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é (–æ–∂–∏–¥–∞–Ω–∏–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å–∫–∏–¥–∫–∏)
    await state.set_state(AddDiscountState.waiting_for_discount)
